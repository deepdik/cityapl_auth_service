# Generated by Django 3.2.4 on 2021-06-26 08:52

import cityapl.libs.accounts.validators
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 255 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=255, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('password', models.CharField(blank=True, max_length=128, null=True, validators=[cityapl.libs.accounts.validators.validate_password], verbose_name='password')),
                ('email', models.EmailField(blank=True, error_messages={'unique': 'A user with that email already exists.'}, help_text='Required. Letters, digits and @/./+/-/_ only.', max_length=255, null=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid email. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='email address')),
                ('mobile_number', models.CharField(blank=True, max_length=12, null=True)),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('account_type', models.CharField(choices=[('1', 'normal'), ('2', 'social')], max_length=2)),
                ('social_id', models.CharField(blank=True, max_length=255, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active.  Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('social_account_type', models.CharField(choices=[('1', 'normal'), ('2', 'social')], max_length=2)),
                ('is_mobile_verify', models.BooleanField(default=False)),
                ('is_mail_verify', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'user',
                'permissions': (),
                'swappable': 'AUTH_USER_MODEL',
            },
        ),
        migrations.CreateModel(
            name='UserDevicesDetail',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('device_type', models.CharField(choices=[('1', 'ios'), ('3', 'web'), ('2', 'android')], max_length=2)),
                ('device_token', models.CharField(max_length=255)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('user_ip', models.CharField(blank=True, max_length=64, null=True)),
                ('user_lat', models.CharField(blank=True, max_length=64, null=True)),
                ('user_lng', models.CharField(blank=True, max_length=64, null=True)),
                ('user_browser', models.CharField(blank=True, max_length=64, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_detail', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_detail',
            },
        ),
    ]
